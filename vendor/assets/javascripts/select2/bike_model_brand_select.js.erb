(function(){

    var ModelNestedBrandSelectBuilder = function(conf){	

        var configs = sel2mix.parsed_conf(conf)		
	configs.api_url = conf.api_url
	configs.brand_api_url = conf.brand_api_url
	configs.model_api_url = conf.model_api_url

	var msg =  sel2mix.obj_merge(
	    [I18n.translate('sel2ui.messages')]
	)

	sel2mix.asClearable.call(this, configs.selector)

	/*
	  Tagging mode for bike model nested brands.
	  
	  Tagging implies that the select element is used 
	  for brand_model_lookup_create.
	  
	  This is where the model is found from a lookup, or a
	  new model is added (as selected option) if the 
	  correct model is not found.
	  
	  It may also be necessary to add a new brand when
	  adding a new model.
	*/

	// Selectors for associated form elements
	var ui_container = new sel2mix.BikeBMContainer(configs.tagging)

	var enable_map = {
	    lookup:{lookup:true,create:false},
	    create:{lookup:false,create:true}
	}

	var enable_sel = function(sel, enable){
	    sel.select2('enable', enable)    
	    // clear contents
	    if (!enable)
		sel2mix.clear_selection(sel)
	}
	var enable_input = function(input, enable){
	    // enable/disable input element
	    if(enable){
		input.removeAttr('disabled')
	    }else{ // see http://jsfiddle.net/gnarf/GpmSs/2/
		input.attr('disabled', 'disabled').val('')
	    }
	    // clear the contents
	    if(! enable ){
		input.val('')
	    }
	}
	var enable_ui_elements = function(group, enable){
	    ui_container.input_group(group).each(function(){
		var input = jQuery(this)
		if(input.attr('type') == 'text')
		    enable_input(input, enable)
		else
		    enable_sel(input, enable)
	    });

	    // coerce the radio to match enabled status
	    var radio = jQuery(ui_container.selector()+" input[value="+group+"]:radio")
	    if(enable){
		radio.prop('checked', 'checked')
	    }else{
		radio.removeProp('checked')
	    }
	}
	var toggle_elements = function(e){
	    var element = jQuery(e.target)
	    var optn = element.attr('value')
	    var checked = element.is(":checked")
	    
	    enable_ui_elements('lookup',enable_map[optn]['lookup'] && checked)
	    enable_ui_elements('create',enable_map[optn]['create'] && checked)
	}

	var trigger_tagging_action = function(e){
	    if(e.val != sel2mix.TAGGING_ID()){
		return
	    }
	    
	    // Get the brand for the given trigger
	    // Need to do this before clearing the select
	    var data = jQuery(configs.selector).select2('data')
	    var b_id = data.brand_id

	    // force a toggle of the interface
	    enable_ui_elements('lookup', false)
	    enable_ui_elements('create',true)
	    
	    // set the brand name
	    ui_container.input('brand_name').val(data.brand)
	    
	    if(false){
		// set the brand id
		ui_container.input('brand_id').val(data.brand_id)	    
	    }

	    // Set the brand id as a constraint for the query
	    ui_container.input('model_constraint').val(b_id)

	    // enter the model select
	    ui_container.input('model_name').focus()
	}


	var tagging_link = function(brand_node){
	    return {brand:brand_node.text,
		    brand_id:brand_node.brand_id,
		    id:sel2mix.TAGGING_ID(),
		    is_tag:true,
		    text:"Enter a new "+brand_node.text+" model."}
	}


	// parse the results into the format expected by Select2.
	var query_parser = function(data, page) {

	    var arr = data.results || []
	    for(var i=0; i<arr.length; i++){
		if(arr[i].direct){
		    arr[i].children.unshift(tagging_link(arr[i]))
		}
	    }

	    data.results = arr;
	    return data;
	}

	var init_sel = function(element, callback){
	    var data = {}
	    // TODO handle case of multiple select vs. single select
	    var model_id = element.val()
	    if(model_id){
		data = {
		    brand:ui_container.value('brand_name'),
		    brand_id:ui_container.value('brand_id'),
		    text:ui_container.value('model_name'),
		    id:model_id,
		    tag:false
		}
	    }
	    callback(data)
	}

	this.build = function(){
	    var params = {
	    	placeholder: "Search for a bike brand or model",
		minimumInputLength: 2,
		allowClear:true,
		initSelection: init_sel,
		ajax: {
		    url: configs.api_url,
		    dataType: 'json',
		    quietMillis: sel2mix.q_delay,
		    data: function (term, page) {
			return {
			    q: term, // search term
			};
		    },
		    results: query_parser
		},
		formatResult: function(item){
		    if(item.is_tag){
			return "<em style='text-decoration: underline;'>"+item.text+'...</i>'
		    }else{
			return item.text
		    }
		}, 
		formatSelection: function(item){
		    return '<strong>'+item.brand+',</strong> ' + item.text
		},
		escapeMarkup: function(m){ return m},
		dropdownCssClass: "bigdrop <%= Select2BikeBinder::Builder::ModelNestedBrandSelect::Selector[] %>" // apply css that makes the dropdown taller
	    } // params ={...}

	    jQuery(configs.selector).select2(params);    
	    
	    if(configs.tagging){
		// Put model nested brands into tagging mode
		
		// Attach Enable/Disable events to radio buttons
		jQuery(ui_container.selector()+" [type=radio]input").each(function(){
		    var btn = jQuery(this)
		    btn.on('change', toggle_elements)
		})
	        jQuery(configs.selector).on("change", trigger_tagging_action)

		// initialize the input fields
		enable_ui_elements('lookup', true)
		enable_ui_elements('create', false)

		// Attach events to the brand select
		var bind_model_constraint = function(event, ui){
		    // Set the brand id as a constraint for the query
		    var selected_id = (ui.item) ? ui.item.id : null
		    ui_container.input('model_constraint').val(selected_id)

		    // Clear the model
		    ui_container.input('model_name').val('')
		}
		ui_container.input('brand_name').autocomplete({
		    source: function(request, response){
			var results = []
			var jqxhr = jQuery.ajax({
			    data: {q:request.term},
			    url:configs.brand_api_url
			}).done(function(resp){
			    for(var i=0; i<resp.results.length; i++){
				results[i] = {label:resp.results[i].text, 
					      value:resp.results[i].text,
					      id: resp.results[i].id
					     }
			    }
			    response(results)
			}).fail(function(jqXHR, textStatus){
			    response([])
			})
		    },
		    select: bind_model_constraint,
		    change: bind_model_constraint,
		    minLength: 2,
		    delay: 100
		})

		ui_container.input('model_name').autocomplete({
		    source: function(request, response){
			var results = []

			var brand_id_val = ui_container.
			    input('model_constraint').val()

			var brand_constraint = (brand_id_val.length > 0)
			    ? brand_id_val
			    : null;

			var jqxhr = jQuery.ajax({
			    data: {
				q:request.term, 
				brand:brand_constraint
			    },
			    url:configs.model_api_url
			}).done(function(resp){
			    for(var i=0; i<resp.results.length; i++){
				results[i] = resp.results[i].text
			    }
			    response(results)
			}).fail(function(jqXHR, textStatus){
			    response([])
			})
		    },
		    minLength: 2,
		    delay: 100
		})
		
	    }

	} // this.build = function


    } //  var ModelNestedBrandSelectBuilder

    var BrandSelectBuilder = function(conf){	
	var configs = sel2mix.parsed_conf(conf)		
	configs.api_url = conf.api_url

	var msg =  sel2mix.obj_merge(
	    [I18n.translate('sel2ui.messages')]
	)

	// When the brand changes, the selection
	// for model is no longer valid, so it
	// needs to be cleared. 
	// And for convenience, the selection
	// should be openend unless the brand is cleared
	var trigger_model_update = function(e){
	    if(!configs.tagging){
		return
	    }
	    var ui_container = new sel2mix.BikeBMContainer(configs.tagging)

	    // TODO clear the brand_id when in tagging mode

	    // clear the model name
	    ui_container.input('model_name').val('')
	    
	    if(model_sel){
		sel2mix.clear_selection(model_sel)
		
		if(e.val)
		    ui_container.input('model_name').triggerHandler('focus')
	    }
	}

	var query_parse = (configs.tagging) ? 
	    sel2mix.tagFlatResults :
	    function(data, page){return data}

	this.build = function(){
	    var params = {
	    	placeholder: "Search for a bike brand",
		minimumInputLength: 2,
		allowClear: true,
		ajax: {
		    url: configs.api_url,
		    dataType: 'json',
		    quietMillis: sel2mix.q_delay,
		    data: function (term, page) {
			return {
			    q: term, // search term
			};
		    },
		    results: query_parse
		},
		formatResult: function(item){
		    return item.text;
		}, 
		formatSelection: function(item){
		    return item.text
		},
		dropdownCssClass: "bigdrop <%= Select2BikeBinder::Builder::BrandSelect.selector_class %>" // apply css that makes the dropdown taller
	    }

	    $(configs.selector).select2(params);    

	    $(configs.selector).on('change', trigger_model_update);    

	} // this.build = function

    } // var BrandSelectBuilder

    var ModelSelectBuilder = function(conf){	
	var configs = sel2mix.parsed_conf(conf)		
	configs.api_url = conf.api_url

	var msg =  sel2mix.obj_merge(
	    [I18n.translate('sel2ui.messages')]
	)

	var ui_container = new sel2mix.BikeBMContainer(configs.tagging)

	// Constrain model to a specific brand if a brand is specified
	var constraints = function(){
	    var brand_id = ui_container.input('brand_id').val()
	    
	    return (brand_id != '') ? {id:''} : {brand:brand_id}
	}
	
	var query_data = function(term, page){
	    // create the request parameters
	    return sel2mix.obj_merge(
		[{q: term}, constraints()])
	}

	// parse the results into the format expected by Select2.
	var query_parse = 
	    function(data, page){
		if (configs.tagging) {
		    return sel2mix.tagFlatResults(data, page)
		}else{
		    return data
		}
	    }

	this.build = function(){
	    var params = {
	    	placeholder: "Search for a bike model",
		minimumInputLength: 2,
		allowClear: true,
		ajax: {
		    url: configs.api_url,
		    dataType: 'json',
		    quietMillis: sel2mix.q_delay,
		    data: query_data,
		    results: query_parse
		},
		formatResult: function(item){
		    return item.text;
		}, 
		formatSelection: function(item){
		    return item.text
		},
		dropdownCssClass: "bigdrop <%= Select2BikeBinder::Builder::ModelSelect.selector_class %>" // apply css that makes the dropdown taller
	    }

	    $(configs.selector).select2(params);    
	    
	} // this.build = function

    } // var BikeModelSelectBuilder


    // Public access to the buildier
    this.ModelNestedBrandSelectBuilder = {
	selector:"<%="*.#{Select2BikeBinder::Builder::ModelNestedBrandSelect.selector_class}"%>",
	build:function(args){
	    return (new ModelNestedBrandSelectBuilder(args)).build()
	}
    }

    this.BrandSelectBuilder = {
	selector:"<%="*.#{Select2BikeBinder::Builder::BrandSelect.selector_class}"%>",
	build:function(args){
	    return (new BrandSelectBuilder(args)).build()
	}
    }

    this.ModelSelectBuilder = {
	selector:"<%="*.#{Select2BikeBinder::Builder::ModelSelect.selector_class}"%>",
	build:function(args){
	    return (new ModelSelectBuilder(args)).build()
	}
    }

}).apply(sel2); // apply to the sel2 namespace