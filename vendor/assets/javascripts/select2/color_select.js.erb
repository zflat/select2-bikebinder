(function(){
    var ColorSelectBuilder = function(conf){
	var color_keys = <%= ColorNameI18n::keys.to_json.html_safe  %>;

	var configs = sel2mix.parsed_conf(conf)

	var msg =  sel2mix.obj_merge(
	    [I18n.translate('colorselui.messages'),
	     I18n.translate('sel2ui.messages')])
	sel2mix.asCapitalizer.call(this, msg.not_applicable)	
	var placeholder = new sel2mix.Placeholder(msg, configs)

	var Color = function Color(rgb){
	    this.rgb = rgb;
	    var record = function(){
		return I18n.translate('color_keys.'+rgb);
	    }
	    var missing_na = function(){return msg.not_applicable}	    
	    sel2mix.asRecordLookup.call(this, record)
	    
	    this.name = function(def_val){return this.lookup('name', def_val||msg.not_applicable)};
	    this.alt = function(def_val){return this.lookup('alt', def_val||msg.not_applicable)};
	}

	var color_optns = new sel2mix.Options4Sel2(color_keys, Color)

	// Formatting for search results
	var format_search_results = function(optn){
	    c = new Color(optn.id)
	    return "<span class='colorSquare', style='margin:0px; display:inline-block; background:#" + c.rgb +"'></span> "+ 
		sel2.capStr(c.name())+" ";
	}

	var sel_formatters = {
	    multiple: format_search_results,
	    single: format_search_results
	}
	var selected_formatter = new  sel2mix.SelectedFormatter(sel_formatters, configs)

	// query object that uses the configuration
	// and has behaviour as created by mixins
	var query = jQuery.extend(true, {}, configs)
	// lets mix!
	sel2mix.asAnywhereMatcher.call(query, ['alt', 'name'], Color)
	sel2mix.asNoMatchStaticMessenger.call(query, msg)
	sel2mix.asPollerSelection.call(query, configs.selector)
	sel2mix.asInvalidMinSearch.call(query, 2)
	sel2mix.asConsistentChoices.call(query, color_optns)
	sel2mix.asLinearSearch.call(query)
	sel2mix.asQueriable.call(query)

	// Conditionally mix in the initializer based on if
	// the configs specify the multiple select option
	var initializer = 
	    (configs.allow_multiple)?
	    new sel2mix.MultiplesInitializer():
    	    new sel2mix.NonMultiplesInitializer()

	this.build = function(){
	    var base_configs = {
		dropdownCss: {"background":"ccf", 
			      "border":"1px solid #999", 
			      "padding-top":"3px"},
		allowClear: true,
		formatResult: format_search_results,
		formatSelection: selected_formatter.format,
		formatNoMatches: query.no_match_msg,
		dropdownCssClass: "color_select",
		placeholder: sel2.capStr(placeholder.str()),
	    }

	    var multi_select_configs = {
		data: color_optns,
		query: query.options,
		multiple: configs.allow_multiple,
		initSelection: initializer.init_selection
	    }
	    
	    var params = (configs.allow_multiple) ?
		jQuery.extend(true,{}, base_configs, multi_select_configs)
	    : base_configs

	    $(configs.selector).select2(params);
	} // this.build = function

    } // ColorSelectBuilder
    
    // Public access to the buildier
    this.ColorSelectBuilder = {
	selector:"<%="*.#{Select2BikeBinder::Builder::ColorSelect.selector_class}"%>",
    	build: function(args){
	    return (new ColorSelectBuilder(args)).build()
	}
    }
    
}).apply(sel2); // apply to the sel2 namespace


{

    // more methods that should be implemented in the sel2mix namespace?

    function clear_selection(){
	$(selector).select2("data","");
    }

} 

