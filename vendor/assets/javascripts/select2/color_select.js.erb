(function(){
    var ColorSelectBuilder = function(conf){
	var color_optns = <%= ColorNameI18n::keys.to_json.html_safe  %>;

	if(!I18n || !I18n.translate){
	    throw(new Error("I18n not supported"))
	}

	var configs = sel2mix.parsed_conf(conf)

	// lets mix!
	var msg =  sel2mix.obj_merge(
	    [I18n.translate('colorselui.messages'),
	     I18n.translate('sel2ui.messages')])
	sel2mix.asCapitalizer.call(this, [])	
	var placeholder = new sel2mix.Placeholder(msg, configs)

	var Color = function Color(rgb){
	    this.rgb = rgb;
	    this.record = function(){
		return I18n.translate('color_keys.'+rgb);
	    }
	    
	    sel2mix.asRecordLookup.call(this, this.record)
	    
	    this.name = function(){return this.lookup('name')};
	    this.alt = function(){return this.lookup('alt')};
	}


	// Formatting for search results
	var format_search_results = function(optn){
	    c = new Color(optn.id);
	    return "<span class='color_optn', style='background:#" + c.rgb +"'>[-]</span>"+ 
		sel2.capStr(c.name());
	}

	var sel_formatters = {
	    multiple:
	    function format_compact_text(optn, container){
		
		// Compact formatting for selection
		var c = new Color(optn.id);
		return sel2.capStr(c.name());
	    },

	    single:
	    function format_summary_text(optn, container){
 		// Non-compact formatting for selection
		var c = new Color(optn.id);
		var str = c.name() + "(#" + c.rgb + ")";
		return sel2.capStr(str);
	    }
	}
	var selected_formatter = new  sel2mix.SelectedFormatter(sel_formatters, configs)



	var query = function(){
	    var sel_id = config.selector

	    this.matcher = function(term, key){
		var strKey = ""+key;
		var match_beginning = (strKey.indexOf(term)==0);
		
		var alt = (new Color(key)).alt();
		var match_alt = false;

		for(var i=0; i<alt.length; i++){
		    val = alt[i];
		    if((val.indexOf(term) >=0)){
			match_trad = true;
			break;
		    }
		}
		return match_beginning || match_alt;
	    }
	    
	    sel2mix.asNoMatchStaticMessenger(this, msg)
	    sel2mix.asPollerSelection.call(this, sel_id)
	    sel2mix.asInvalidMinSearch.call(this, 2)
	    sel2mix.asLinearSearch.call(this)
	    sel2mix.asConsistentChoices.call(this, color_optns)
	    sel2mix.asQueriable.call(this)
	}
	

	this.build = function(){
	    $(configs.selector).select2({
		dropdownCss: {"background":"ccf", 
			      "border":"1px solid #999", 
			      "padding-top":"3px"},
		allowClear: true,
		formatResult: format_search_results,
		formatSelection: selected_formatter.format,
		formatNoMatches: query.no_match_msg,
		dropdownCssClass: "color_select",
		//data: color_optns,
		//query: query.options,
		placeholder: sel2.capStr(placeholder.str()),
		//multiple: allow_multiple,
		//initSelection: init_selection
	    });
	} // function = build

    }
    

    // Public access to the buildier
    this.ColorSelectBuilder = function(args){
	return new ColorSelectBuilder(args)
    }
    
}).apply(sel2); // apply to the sel2 namespace


function ColorSelectBuilder(args){

    function options(list, objT){
	this.list = list

	// Sorting in descending order
	// http://www.javascriptkit.com/javatutors/arraysort.shtml
	var list_desc = list.sort(function (a,b){return b-a});

	var opt = [];
	for(var i=0; i<list_desc.length; i++){
	    var s_i = new objT(list_desc[i]);
	    opt.push({id:list_desc[i].toString(), text:sel2.capStr(s_i.name())});
	}
	return opt;
    }



    function clear_selection(){
	$(selector).select2("data","");
    }


    function init_selection(element, callback){
	if(allow_multiple){
	    var data = [];
	    $(element.val().split(",")).each(function () {
		    var str = jQuery.trim(this);
		    data.push({id: str, text: str});
		});
	    callback(data);
	}else{
	    str = element.val();
	    callback({id:str, text:str});	    
	}
    }



    function list_vals(arr){
	strText = "";
	if(arr.length < 1){
	    strText = arr_msg.not_applicable;
	}else if(arr.length == 1){
	    strText = capStr(arr[0]);
	}else{
	    strText = "<ul class=\"attrib\">";
	    for(var i=0; i<arr.length; i++){
		strText +="<li>";
		strText +=capStr(arr[i]);
		strText +="</li>";
	    }
	    strText +="</ul>";
	}

	return strText;
    }

} 

