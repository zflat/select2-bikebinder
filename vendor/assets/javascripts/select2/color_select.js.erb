function ColorSelectBuilder(args){
    var id = args.id;
    var allow_multiple = args.multiple;
    var selector = '#'+id;
    var disp_compact = args.compact;

    if(I18n && I18n.translate){
	var msg_colorui = I18n.translate('colorselui.messages');
	var msg_sel2ui =  I18n.translate('sel2ui.messages');
	var arr_msg = jQuery.extend(true, {}, msg_sel2ui, msg_colorui);
	var arr_colors = <%= ColorNameI18n::keys.to_json.html_safe %>;
    }else{
	throw(new Error("I18n not supported"));
    }

    function strPlaceholder(){
	return (disp_compact) ?
	    arr_msg.select_placeholder_compact:
	    arr_msg.select_placeholder;
    }

    function Color(rgb){
	this.rgb = rgb;
	this.record = function(){
	    return I18n.translate('color_keys.'+rgb);
	}
	// Attributes that have 1 record are returned as String
	this.lookup = function(key){
	    return this.record()[key];
	}
	// Attributes that have 0 or more records are returned as Arrays
	this.lookup_arr = function(key){
	    obj = this.lookup(key);
	    var arr = [];
	    if(null == obj){
		// null
		arr.push(arr_msg.not_applicable);
	    }else if(obj.hasOwnProperty('length')){
		// String
		arr.push(obj);
	    }else{
		// List
		jQuery.each(obj, function(key, str){
			arr.push(str);
		    });
	    }
	    return arr;
	}
	this.name = function(){return this.lookup('name')};
	this.alt = function(){return this.lookup('alt')};
    }

    function options(list, objT){
	this.list = list

	// Sorting in descending order
	// http://www.javascriptkit.com/javatutors/arraysort.shtml
	var list_desc = list.sort(function (a,b){return b-a});

	var opt = [];
	for(var i=0; i<list_desc.length; i++){
	    var s_i = new objT(list_desc[i]);
	    opt.push({id:list_desc[i].toString(), text:capStr(s_i.name())});
	}
	return opt;
    }

    function matcher(term, key){
	var strKey = ""+key;
	var match_beginning = (strKey.indexOf(term)==0);

	var alt = (new Color(key)).alt();
	var match_alt = false;

	for(var i=0; i<alt.length; i++){
	    val = alt[i];
	    if((val.indexOf(term) >=0)){
		match_trad = true;
		break;
	    }
	}
	return match_beginning || match_alt;
    }

    function in_selection(id){
	var bln_in_selection = false;
	// verify that the item with given id is not already selected
	selection = $(selector).select2("data");
	if(null != selection){
	    for (var i=0; i<selection.length; i++){
		if (selection[i].id == id){
		    bln_in_selection = true;
		}
	    }
	}
	return bln_in_selection;
    }

    function linear_search(term, choices){
	var arr_matches = [];
	var arr_selected = [];
	var c;
	for(var i=0; i<choices.length; i++){
	    c = choices[i];
	 
	    if(matcher(term, c.id)){
		if(in_selection(c.id)){
		    arr_selected.unshift(c.id);
		}else{
		    arr_matches.unshift(c);
		}
	    }
	}
	return {
	    matches:arr_matches, 
	    pre_selected:arr_selected
	};
    }

    function q_options(query){
	var term = query.term;
        var more = false;
        var context = null;
	var choices = [];

	if(term == ""){
	    choices = color_optns
	}else if(invalid_search(term)){
	    choices = [];
	}else{
	    choices = linear_search(term, color_optns);
	    choices = choices.matches;
	}

	var data = {results: choices, more: false, context: null};
	query.callback(data);
    }
    
    // stackoverflow.com/questions/1026069/capitalize-the-first-letter-of-string-in-javascript	
    function capStr(string){
	if(string == arr_msg.not_applicable){return string;}
	return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function invalid_search(term){
	return term.length<2;
    }

    /*
      Provides message based on conditions:
      * Loaded full
      * The search term gives a match that is already selected
     */
    function noMatchesMsg(term){
	if(invalid_search(term))
	    return capStr(arr_msg.search_requirements);
	
	// determine if the term matches existing selection
	var search_res = linear_search(term, $(selector).select2("data"));
	var is_pre_selected = (search_res.pre_selected.length >0 );

	var base_msg = 	
	    capStr((is_pre_selected)?
		   arr_msg.search_already_selected:
		   arr_msg.search_no_found );

	base_msg += ". ";
	var text = base_msg;

	return text;
    }

    function clear_selection(){
	$(selector).select2("data","");
    }


    function init_selection(element, callback){
	if(allow_multiple){
	    var data = [];
	    $(element.val().split(",")).each(function () {
		    var str = jQuery.trim(this);
		    data.push({id: str, text: str});
		});
	    callback(data);
	}else{
	    str = element.val();
	    callback({id:str, text:str});	    
	}
    }

    // Formatting for selected options
    function format_simple(opt, container){
	if(!opt.id){
	    return "";
	}else if(opt.id!="header") {
           var str = (allow_multiple) ? 
           format_compact_text(opt, container) :
           format_summary_text(opt, container); 
           return str;
	}else{
	    return "";
	}
    }

    // Non-compact formatting for selection
    function format_summary_text(optn, container){
	var c = new Color(optn.id);
	var str = c.name() + "(#" + c.rgb + ")";
	return capStr(str);
    }

    // Compact formatting for selection
    function format_compact_text(optn, container){
	var c = new Color(optn.id);
	return capStr(c.name());
    }

    // Formatting for search results
    function format_complete(optn){
	c = new Color(optn.id);
	return "<span class='color_optn', style='background:#" + c.rgb +"'>[-]</span>"+ 
	    capStr(c.name());
    }

    function list_vals(arr){
	strText = "";
	if(arr.length < 1){
	    strText = arr_msg.not_applicable;
	}else if(arr.length == 1){
	    strText = capStr(arr[0]);
	}else{
	    strText = "<ul class=\"attrib\">";
	    for(var i=0; i<arr.length; i++){
		strText +="<li>";
		strText +=capStr(arr[i]);
		strText +="</li>";
	    }
	    strText +="</ul>";
	}

	return strText;
    }


    this.build = function(){
	$(selector).select2({
		dropdownCss: {"background":"ccf", 
			      "border":"1px solid #999", 
			      "padding-top":"3px"},
		allowClear: true,
		formatResult: format_complete,
		formatSelection: format_simple,
		formatNoMatches: noMatchesMsg,
		dropdownCssClass: "color_select",
		//data: color_optns,
		//query: q_options,
		placeholder: capStr(strPlaceholder()),
		//multiple: allow_multiple,
		//initSelection: init_selection
	    });
	
    }

} 

