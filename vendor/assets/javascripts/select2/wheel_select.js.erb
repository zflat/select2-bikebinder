(function(){
    var WheelSelectBuilder = function(conf){


	var configs = sel2mix.parsed_conf(conf)
	var loaded_full = false
	var msg =  sel2mix.obj_merge(
	    [I18n.translate('wheelui.messages'),
	     I18n.translate('isobsd.messages')])
	sel2mix.asCapitalizer.call(this, msg)		
	var arr_bsd = {
	    common:	<%= IsoBsdI18n::Rarity::get(:common).hash.keys.to_json.html_safe %>,
	    uncommon:<%= IsoBsdI18n::Rarity::get(:uncommon).hash.keys.to_json.html_safe %>,
	    rare:	<%= IsoBsdI18n::Rarity::get(:rare).hash.keys.to_json.html_safe %>,
	}

	var placeholder = new sel2mix.Placeholder(msg, configs)


	function Size(bsd){
	    this.bsd = bsd
	    var record = function(){
		return I18n.translate('isobsd.sizes.'+bsd)
	    }
	    sel2mix.asRecordLookup.call(this, record)

	    this.diameter = function(){return bsd+"mm"}
	    this.app = function(){return this.lookup_arr('app')}
	    this.trad = function(){return this.lookup_arr('trad')}
	    this.rarity_key = function(){
	    }

	    this.rarity = function(){
		var val = msg.not_applicable
		var d = parseInt(bsd, 10)
		jQuery.each(arr_bsd, function(key, list){
		    if(arr_bsd.hasOwnProperty(key) && list.indexOf(d)>=0){
			val = I18n.translate('isobsd.rarity.'+key)
		    }
		}) // jQuery.each
		    return val
	    } // rarity
	} // Color

	function size_list(rarity){
	    var list = [];
	    for (var r=0; r<rarity.length; r++){
		list = list.concat(arr_bsd[rarity[r]])
	    }
	    // Sorting in descending order
	    // http://www.javascriptkit.com/javatutors/arraysort.shtml
	    var list_desc = list.sort(function (a,b){return b-a});
	}

	function size_optns(rarity){
	    var list = size_list(rarity)
	    return (new sel2mix.Options4Sel2(list, Size))
	}
    
	var optns_partial = size_optns(['common', 'uncommon']);
	var optns_all = size_optns(['common', 'uncommon', 'rare']);


	// format for search results
	var format_search_results = function(size){
	    if(size.id=="header") {
		return "<table class=\"wheel_opt\"><tr><th class=\"iso\">"
		    +capStr(msg.header.iso)+"</th><th class=\"trad\">"
		    +capStr(msg.header.trad)+"</th><th class=\"app\">"
		    +capStr(msg.header.app)+"</th><th class=\"rarity\">"
		    +capStr(msg.header.rarity)+"</th></tr></table>";
	    }
	    s = new Size(size.id);
	    return "<table class=\"wheel_opt\"><tr><td class=\"iso\">"+
		s.diameter()+"</td><td class=\"trad\">"+
		sel2mix.vals_toListStr(s.trad(), msg)+"</td><td class=\"app\">"+
		sel2mix.vals_toListStr(s.app(), msg)+"</td><td class=\"rarity\">"+
		capStr(s.rarity())+"</td></tr></table>";
	}

	// format for selected option in non-compact mode
	var format_summary_text = function(size, container){
	    var s = new Size(size.id);
	    var str = s.bsd
		+": \""
		+s.trad()+"\"";
	    return str;  
	}
	
	// format for selected option in compact mode
	var format_compact_text = function(size, container){
	    var s = new Size(size.id)
	    return s.diameter()
	}

	var sel_formatters = {
	    single: format_summary_text,
	    multiple: format_compact_text
	}
	var selected_formatter = new  sel2mix.SelectedFormatter(sel_formatters, configs)

	function append_header(choices){
	    header_option = {id:'header', text:capStr(strPlaceholder())}
	    a = choices.slice();
	    a.unshift(header_option);
	    return a;
	}	


	function load_full_id(){
	    return "no_size_match_" + id;
	}

	function load_full_selector(){
	    return "#" + load_full_id();
	}

	function load_link_str(){
	    return "<br /><a id=\""+
	    load_full_id()+"\" href=\"#\">"+capStr(msg.full_list_link)+"</a>."
	}


	var query = jQuery.extend(true, {}, configs)
	sel2mix.asWordPrefixMatcher.call(query, ['bsd', 'trad'], Size)
	sel2mix.asNoMatchLoadableMessenger.call(query, msg, load_link_str())
	sel2mix.asPollerSelection.call(query, configs.selector)
	sel2mix.asInvalidMinSearch.call(query, 2)
	sel2mix.asLoadableChoices.call(query, optns_partial, optns_all)
	sel2mix.asLinearSearch.call(query)
	sel2mix.asQueriable.call(query)
	
    

	/*
	function capStr(string){
	    if(string == arr_msg.not_applicable){return string;}
	    return string.charAt(0).toUpperCase() + string.slice(1);
	}
	*/


	function load_full(event){
	    // change state to loaded_full
	    query.load_additional_choices()
	    $(selector).select2("close");	
	    $(selector).select2("open");	
	    return false;
	}

	function conditionalClear(e){        
            if(e.val == "header"){
		clear_selection();
            } else if(e.added && e.added.id == "header"){
		remove_header_msel();
	    }
	}


	
	sel2mix.asClearable.call(this, selector)

	/*
	  Remove the header by iterating over each element
	  and only keeping elements without header id.
	*/
	function remove_header_msel(){
	    var d0 = $(selector).select2("data");
	    var data = [];
	    jQuery.each(d0, function(){
		if(this.id !="header"){
		    data.push(this);
		}
	    });
	    $(selector).select2("data", data);
	}

	function init_selection(element, callback){
	    if(allow_multiple){
		var data = [];
		$(element.val().split(",")).each(function () {
		    var str = jQuery.trim(this);
		    data.push({id: str, text: str});
		});
		callback(data);
	    }else{
		str = element.val();
	    callback({id:str, text:str});	    
	    }
	}

	var initializer = 
	    (configs.allow_multiple)?
	    new sel2mix.MultiplesInitializer():
    	    new sel2mix.NonMultiplesInitializer()

	this.build = function(){

	$(selector).select2({
		dropdownCss: {"background":"ccf", 
			      "width":"700px", 
			      "border":"1px solid #999", 
			      "padding-top":"3px"},
		allowClear: true,
		formatResult: format_complete,
		formatSelection: format_simple,
		formatNoMatches: noMatchesMsg,
		dropdownCssClass: "wheel_select",
		data: append_header(optns_partial),
		query: q_options,
		placeholder: capStr(strPlaceholder()),
		multiple: allow_multiple,
		initSelection: init_selection
	    });
	
	$("*.wheel_select").on("click", load_full_selector(), load_full);
	$(selector).on("change",conditionalClear);
	
    }

    // Public access to the buildier
    this.ColorSelectBuilder = function(args){
	return new ColorSelectBuilder(args)
    }

} 

}).apply(sel2); // apply to the sel2 namespace